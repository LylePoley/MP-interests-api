# generated by datamodel-codegen:
#   filename:  interests.json

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field


class ApiResponseErrorType(Enum):
    ValidationError = "ValidationError"
    AuthenticationError = "AuthenticationError"
    ConnectivityError = "ConnectivityError"
    GenericError = "GenericError"


class FieldTypeInfo(BaseModel):
    class Config:
        extra = "forbid"

    currencyCode: Optional[str] = None


class InterestsSortOrder(Enum):
    """
    The order in which interests endpoints should return results.
    """

    PublishingDateDescending = "PublishingDateDescending"
    CategoryAscending = "CategoryAscending"


class Link(BaseModel):
    """
    HATEOAS Link for retrieving related information to a response or object.
    """

    class Config:
        extra = "forbid"

    rel: Optional[str] = Field(
        None, description="Relationship of the link to the object requested."
    )
    href: Optional[str] = Field(
        None, description="A complete URL that shows how the action can be performed."
    )
    method: Optional[str] = Field(None, description="Request method of the link.")


class Member(BaseModel):
    """
    Member of Parliament who has registered the interest.
    """

    class Config:
        extra = "forbid"

    id: Optional[int] = Field(None, description="ID of the member.")
    nameDisplayAs: Optional[str] = Field(
        None,
        description="Member's current full name, as it should be displayed in text.",
    )
    nameListAs: Optional[str] = Field(
        None,
        description="Member's current name in the format {surname}, {forename}, for use in an ordered list.",
    )
    house: Optional[str] = Field(
        None,
        description="The name of the House the Member is currently associated with.",
    )
    memberFrom: Optional[str] = Field(
        None, description="Constituency of Commons Members."
    )
    party: Optional[str] = Field(
        None, description="Party the Member is currently associated with."
    )
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for retrieving further information about this member.",
    )


class ProblemDetails(BaseModel):
    type: Optional[str] = None
    title: Optional[str] = None
    status: Optional[int] = None
    detail: Optional[str] = None
    instance: Optional[str] = None


class RegisterDocument(Enum):
    """
    Whether a document contains the full register or only updates
    """

    Full = "Full"
    Updated = "Updated"


class RegisterType(Enum):
    """
    The type of register of interests
    """

    Commons = "Commons"


class ApiResponseError(BaseModel):
    class Config:
        extra = "forbid"

    errorType: Optional[ApiResponseErrorType] = None
    errorMessages: Optional[List[str]] = None


class FieldModel(BaseModel):
    class Config:
        extra = "forbid"

    name: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    typeInfo: Optional[FieldTypeInfo] = None
    value: Optional[Any] = None
    values: Optional[List[List[FieldModel]]] = None


class ObjectApiResponse(BaseModel):
    class Config:
        extra = "forbid"

    error: Optional[ApiResponseError] = None
    response: Optional[Any] = None


class PublishedCategory(BaseModel):
    """
    Category an interest can be registered with.
    """

    class Config:
        extra = "forbid"

    id: Optional[int] = Field(None, description="ID of the category.")
    number: Optional[str] = Field(
        None, description="Number of the category in the code of conduct."
    )
    name: Optional[str] = Field(None, description="Name of the category.")
    parentCategoryIds: Optional[List[int]] = Field(
        None,
        description="The unique ID for any parent category to which this category is associated, if the category is associated with another category.",
    )
    type: Optional[RegisterType] = None
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for retrieving further information about this category.",
    )


class PublishedCategoryApiLinkedSearchResult(BaseModel):
    """
    Paginated search result with HATEOAS Links.
    """

    class Config:
        extra = "forbid"

    skip: Optional[int] = Field(
        None, description="The skip value that was used in the query."
    )
    take: Optional[int] = Field(
        None, description="The take value that was used in the query."
    )
    totalResults: Optional[int] = Field(
        None, description="The total number of results which matches the query."
    )
    items: Optional[List[PublishedCategory]] = Field(
        None,
        description="The list of items found for the specified page (by requested skip and take).",
    )
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for navigating through the paginated result.",
    )


class PublishedInterest(BaseModel):
    """
    Version of an interest which has been published.
    """

    class Config:
        extra = "forbid"

    id: Optional[int] = Field(None, description="ID of the interest.")
    summary: Optional[str] = Field(None, description="Title Summary for the interest.")
    parentInterestId: Optional[int] = Field(
        None,
        description="The unique ID for the payer (parent interest) to which this payment (child interest) is associated.",
    )
    registrationDate: Optional[date] = Field(
        None, description="Registration Date on the published interest."
    )
    publishedDate: Optional[date] = Field(
        None, description="Date when the interest was first published."
    )
    updatedDates: Optional[List[date]] = Field(
        None,
        description="A list of dates on which the interest has been updated since it has been published.",
    )
    category: Optional[PublishedCategory] = None
    member: Optional[Member] = None
    fields: Optional[List[FieldModel]] = Field(
        None,
        description="List of fields which are available for a member to add further information about the interest.",
    )
    childInterests: Optional[List[PublishedInterest]] = Field(
        None,
        description="List of Interests which are sub interests of this interest. This property is only present if `ExpandChildInterests` is true, and is not defined by default.",
    )
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for retrieving related information about this interest.",
    )
    rectified: Optional[bool] = Field(
        None,
        description="Whether the interest has been rectified (e.g. when the interest was submitted late).",
    )
    rectifiedDetails: Optional[str] = Field(
        None,
        description="The reason that the interest was rectified, or `null` if the interest was not rectified.",
    )


class PublishedInterestApiLinkedSearchResult(BaseModel):
    """
    Paginated search result with HATEOAS Links.
    """

    class Config:
        extra = "forbid"

    skip: Optional[int] = Field(
        None, description="The skip value that was used in the query."
    )
    take: Optional[int] = Field(
        None, description="The take value that was used in the query."
    )
    totalResults: Optional[int] = Field(
        None, description="The total number of results which matches the query."
    )
    items: Optional[List[PublishedInterest]] = Field(
        None,
        description="The list of items found for the specified page (by requested skip and take).",
    )
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for navigating through the paginated result.",
    )


class PublishedRegister(BaseModel):
    """
    A published version of a register of interests.
    """

    class Config:
        extra = "forbid"

    id: Optional[int] = Field(None, description="ID of the register.")
    publishedDate: Optional[date] = Field(
        None, description="Date when the Register was published."
    )
    type: Optional[RegisterType] = None
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for retrieving related information about this register.",
    )


class PublishedRegisterApiLinkedSearchResult(BaseModel):
    """
    Paginated search result with HATEOAS Links.
    """

    class Config:
        extra = "forbid"

    skip: Optional[int] = Field(
        None, description="The skip value that was used in the query."
    )
    take: Optional[int] = Field(
        None, description="The take value that was used in the query."
    )
    totalResults: Optional[int] = Field(
        None, description="The total number of results which matches the query."
    )
    items: Optional[List[PublishedRegister]] = Field(
        None,
        description="The list of items found for the specified page (by requested skip and take).",
    )
    links: Optional[List[Link]] = Field(
        None,
        description="A list of HATEOAS Links for navigating through the paginated result.",
    )


FieldModel.update_forward_refs()
PublishedInterest.update_forward_refs()
